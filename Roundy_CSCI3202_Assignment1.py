#Travis Roundy
#CSCI 3202-Intro to Artificial Intelligence
#Assignment 1

import sys
from Queue import Queue
from Stack import Stack
from BinaryTree import Node
from BinaryTree import BinaryTree
from Graph import Graph

if __name__ == "__main__":
	print("This is the Queue Test. Added 10 integers to the queue:")
	c = Queue()
	c.Add(1)
	c.Add(2)
	c.Add(3)
	c.Add(4)
	c.Add(5)
	c.Add(6)
	c.Add(7)
	c.Add(8)
	c.Add(9)
	c.Add(10)
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Dequeued: %s" % c.Remove())
	print("Queue Test Completed.")
	print("-------------------------------------------------------")
	print("This is the Stack Test. Added 10 elements to the stack:")
	c = Stack()
	c.push(1)
	c.push(2)
	c.push(3)
	c.push(4)
	c.push(5)
	c.push(6)
	c.push(7)
	c.push(8)
	c.push(9)
	c.push(10)
	c.checkSize()
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	print("Popped off: %s" % c.pop())
	c.checkSize()
	print("Stack Test completed.")
	print("-------------------------------------------------------")
	print("This is the Graph Test: ")
	graph = Graph()
	graph.addVertex(1)
	graph.addVertex(2)
	graph.addVertex(3)
	graph.addVertex(4)
	graph.addVertex(5)
	graph.addVertex(5)
	graph.addVertex(6)
	graph.addVertex(7)
	graph.addVertex(8)
	graph.addVertex(9)
	graph.addVertex(10)
	graph.addEdge(1,10)
	graph.addEdge(1,2)
	graph.addEdge(1,4)
	graph.addEdge(1,6)
	graph.addEdge(1,8)
	graph.addEdge(11,10)
	graph.addEdge(2,3)
	graph.addEdge(2,5)
	graph.addEdge(2,7)
	graph.addEdge(2,9)
	graph.addEdge(3,4)
	graph.addEdge(4,6)
	graph.addEdge(4,2)
	graph.addEdge(4,9)
	graph.addEdge(5,10)
	graph.addEdge(5,3)
	graph.addEdge(6,3)
	graph.addEdge(7,8)
	graph.addEdge(8,3)
	graph.addEdge(9,10)
	graph.addEdge(10,4)
	graph.findVertex(2)
	graph.findVertex(3)
	graph.findVertex(4)
	graph.findVertex(5)
	graph.findVertex(6)
	print("Graph Test Completed.")
	print("-------------------------------------------------------")
	print("This is the tree test. It does not work all the way.")
	tree = BinaryTree(1)
	tree.add(2,1)
	tree.add(3,1)
	tree.add(10,1)
	tree.add(4,2)
	tree.add(5,2)
	tree.remove(2)
	tree.remove(1)
	print("Tree Test Completed.")

